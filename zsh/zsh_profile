# -*- mode: sh -*-

# Toggle back and forth between vim and shell with ctrl-z
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# Nicer less behavior
export LESS=-Ri

# Set EDITOR to vim just for the vit command b/c mvim doesn't play nice
# with it.
vitt () {
    (
        export EDITOR=vim
        vit
    )
}

alias vit=vitt
alias ij="open -b com.jetbrains.intellij"

vman() {
  vim -c "SuperMan $*"

  if [ "$?" != "0" ]; then
    echo "No manual entry for $*"
  fi
}

# Find out which process is using a port, for example 9000
# alia lsof -i :9000
alias ij="open -a /Applications/IntelliJ\ IDEA\ 14.app/ "
emacs() {
    if [[ `uname` == "Darwin" ]]; then
        /usr/local/Cellar/emacs-plus/24.5/Emacs.app -nw $1
    else
        emacs -nw $1
    fi
}

# overwriting my old vim alias
alias e="emacsclient -n"

# Simulate a slow connection. Run these on the host machine.
ipfw-throttle() {
    port=$1
    # sudo ipfw pipe 1 config bw 1024Kbyte/s delay 500ms
    sudo ipfw pipe 1 config bw 4096Kbyte/s
    sudo ipfw add 1 pipe 1 src-port $port
}

alias ipfw-restore="sudo ipfw delete 1; sudo ipfw pipe 1 delete"

# Docker
# Starts the Docker Linux host and makes docker commands use it.
# Workaround to make this work with tmux.
alias terminal-notifier='reattach-to-user-namespace terminal-notifier'
tn() {
    echo "$@"| terminal-notifier
}
# Notify that we're done
tnd() {
    echo "done" | terminal-notifier
}
# Shorthand for docker-machine
dm() {
    docker-machine "$@"
}
# Shorthand for docker-compose
dc() {
    docker-compose "$@"
}

# Remove everything.
drm() {
    # Delete all containers
    docker rm -f $(docker ps -a -q)
    # Delete all images
    docker rmi -f $(docker images -q)
}

if (( $+commands[docker-machine] )) ; then
    echo "Starting docker-machine..."
    docker-machine start default
    eval "$(docker-machine env default)"
fi

#############
# Utilities #
#############
# Output the biggest 10 files in human readable form.
big-files() {
    # Uses gsort installed from `brew install coreutils`
    du -hsx * | gsort -rh | head -10
}
